// -*- C++ -*-
//
// Package:    ElectronSelectors
// Class:      ElectronSelectors
#include <memory>

#include "FWCore/Framework/interface/Frameworkfwd.h"
#include "FWCore/Framework/interface/EDProducer.h"

#include "FWCore/Framework/interface/Event.h"
#include "FWCore/Framework/interface/MakerMacros.h"

#include "FWCore/ParameterSet/interface/ParameterSet.h"
#include "DataFormats/VertexReco/interface/Vertex.h"
#include "DataFormats/VertexReco/interface/VertexFwd.h"
#include "DataFormats/EgammaCandidates/interface/GsfElectron.h"
#include "DataFormats/EgammaCandidates/interface/GsfElectronFwd.h"
#include "DataFormats/EgammaCandidates/interface/Conversion.h"
#include "DataFormats/GsfTrackReco/interface/GsfTrack.h"
#include "DataFormats/RecoCandidate/interface/IsoDeposit.h"
#include "EGamma/EGammaAnalysisTools/interface/EGammaCutBasedEleId.h"

//includes needed for this file

using namespace edm;
//using namespace reco;
using namespace std;

class ElectronSelector : public edm::EDProducer {
   public:
      explicit ElectronSelector(const edm::ParameterSet&);
      ~ElectronSelector();

      static void fillDescriptions(edm::ConfigurationDescriptions& descriptions);

   private:
      virtual void beginJob() ;
      virtual void produce(edm::Event&, const edm::EventSetup&);
      virtual void endJob() ;
      
      virtual void beginRun(edm::Run&, edm::EventSetup const&);
      virtual void endRun(edm::Run&, edm::EventSetup const&);
      virtual void beginLuminosityBlock(edm::LuminosityBlock&, edm::EventSetup const&);
      virtual void endLuminosityBlock(edm::LuminosityBlock&, edm::EventSetup const&);


      InputTag electronSrc_;
      InputTag conversionsSrc_;
      InputTag vtxSrc_;
      InputTag beamSpotSrc_;
      InputTag rhoIsoSrc_;
      vector<InputTag>  isoValsSrc_;
      bool   doEleVeto_;
      double minElePt_, maxEleEta_;
      string labelName_;



};

typedef vector< Handle< ValueMap<reco::IsoDeposit> > >   IsoDepositMaps;
typedef vector< Handle< ValueMap<double> > >             IsoDepositVals;
typedef reco::Candidate::LorentzVector LorentzVector;

ElectronSelector::ElectronSelector(const ParameterSet& iConfig)
{
  electronSrc_   = iConfig.getParameter<InputTag>("electronSource");
  conversionsSrc_= iConfig.getParameter<InputTag>("conversionsSource");
  vtxSrc_        = iConfig.getParameter<InputTag>("vertexSource");
  beamSpotSrc_   = iConfig.getParameter<InputTag>("beamSpotSource");
  rhoIsoSrc_     = iConfig.getParameter<InputTag>("rhoIsoSource");
  isoValsSrc_    = iConfig.getParameter<vector<InputTag> >("isoValInputTags");
  minElePt_      = iConfig.getParameter<double>("minElePt");
  maxEleEta_     = iConfig.getParameter<double>("maxEleEta");

  produces<vector<reco::GsfElectron> >(labelName_);
  
}


ElectronSelector::~ElectronSelector()
{
 
   // do anything here that needs to be done at desctruction time
   // (e.g. close files, deallocate resources etc.)

}


//
// member functions
//

// ------------ method called to produce the data  ------------
void
ElectronSelector::produce(Event& iEvent, const EventSetup& iSetup)
{

   Handle< vector<reco::GsfElectron> > electrons;   
  iEvent.getByLabel(electronSrc_, electrons);

  Handle< vector<reco::Conversion> > conversions;
  iEvent.getByLabel(conversionsSrc_, conversions);

  IsoDepositVals isoVals(isoValsSrc_.size());
  for (size_t j = 0; j < isoValsSrc_.size(); ++j) {
    iEvent.getByLabel(isoValsSrc_[j], isoVals[j]);
  }
  
  Handle<reco::BeamSpot> beamspot;
  iEvent.getByLabel(beamSpotSrc_, beamspot);
  const reco::BeamSpot &beamSpot = *(beamspot.product());
  
  Handle< vector<reco::Vertex> > vertices;
  iEvent.getByLabel(vtxSrc_, vertices);

  Handle<double> rhoIsoH;
  iEvent.getByLabel(rhoIsoSrc_, rhoIsoH);
  double rhoIso = *(rhoIsoH.product());
  
  auto_ptr<vector<reco::GsfElectron> > selectedElectrons(new vector<reco::GsfElectron>());

  for(unsigned int i = 0; i < electrons->size(); ++i) {

     reco::GsfElectronRef ele(electrons, i);

     if (ele->pt() < minElePt_ || abs(ele->eta()) > maxEleEta_) 
       continue;

    double iso_ch = (*(isoVals)[0])[ele];
    double iso_em = (*(isoVals)[1])[ele];
    double iso_nh = (*(isoVals)[2])[ele];
    bool veto = true;
    //bool veto = EgammaCutBasedEleId::PassWP(EgammaCutBasedEleId::VETO, ele, 
    //                                        conversions, beamSpot, vertices, 
    //                                        iso_ch, iso_em, iso_nh, rhoIso);

    if (vertices->size()>0 && veto) 
       selectedElectrons->push_back(reco::GsfElectron(*ele));
  }

  iEvent.put(selectedElectrons, labelName_);

}

// ------------ method called once each job just before starting event loop  ------------
void 
ElectronSelector::beginJob()
{
}

// ------------ method called once each job just after ending the event loop  ------------
void 
ElectronSelector::endJob() {
}

// ------------ method called when starting to processes a run  ------------
void 
ElectronSelector::beginRun(edm::Run&, edm::EventSetup const&)
{
}

// ------------ method called when ending the processing of a run  ------------
void 
ElectronSelector::endRun(edm::Run&, edm::EventSetup const&)
{
}

// ------------ method called when starting to processes a luminosity block  ------------
void 
ElectronSelector::beginLuminosityBlock(edm::LuminosityBlock&, edm::EventSetup const&)
{
}

// ------------ method called when ending the processing of a luminosity block  ------------
void 
ElectronSelector::endLuminosityBlock(edm::LuminosityBlock&, edm::EventSetup const&)
{
}

// ------------ method fills 'descriptions' with the allowed parameters for the module  ------------
void
ElectronSelector::fillDescriptions(edm::ConfigurationDescriptions& descriptions) {
  //The following says we do not know what parameters are allowed so do no validation
  // Please change this to state exactly what you do use, even if it is no parameters
  edm::ParameterSetDescription desc;
  desc.setUnknown();
  descriptions.addDefault(desc);
}
#include "FWCore/Framework/interface/MakerMacros.h"
//define this as a plug-in
DEFINE_FWK_MODULE(ElectronSelector);
